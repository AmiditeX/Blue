#include "blueiointerface.h"
#include "aesmodule.h"

#include <QFile>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonValue>

BlueIOInterface::BlueIOInterface()
{
    
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                       PUBLIC SLOTS                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BlueIOInterface::writeFile(const QString &path, const QJsonDocument jsonDoc, const QString &compositeKey,
                                const unsigned int iterations, const unsigned int time)
{
    try
    {
        QString kdfSalt = AESModule::generateSalt(); //Generate a 64 bytes salt
        QString derivedKey = AESModule::generateKey(compositeKey, kdfSalt, iterations, time); //Derivate final key from the composite key
        QString initializationVector = AESModule::generateIV(); //Generate a random initialization vector
        QString AData = kdfSalt + initializationVector; //Authenticate data of IV and salt
        QString encryptedData = AESModule::encryptData(jsonDoc.toBinaryData(), AData, derivedKey, initializationVector); //Encrypt database
        
        QJsonObject finalObject; //Prepare the file with the database and its metadata
        finalObject.insert("DBField", encryptedData); //Add the encrypted database
        finalObject.insert("DBInitVector", initializationVector); //Add the initialization vector
        finalObject.insert("DBSaltKey", kdfSalt); //Add the KDF salt
        finalObject.insert("DBIterations", iterations); //Add iteration count
        finalObject.insert("DBStretchTime", time); //Add key stretching time
        QJsonDocument finalDoc(finalObject);
        
        QFile file(path); //Open the file and check for errors
        if(!file.open(QIODevice::WriteOnly | QIODevice::Text))
            throw std::runtime_error("Failed to open writing device");
        
        //Write the encrypted database and metada as a compressed binary file
        file.write(qCompress(finalDoc.toJson(), 9));
        file.close();
    }
    catch(...)
    {
        
    }
}

QJsonDocument BlueIOInterface::readFile(const QString &path, const QString &compositeKey)
{
    try 
    {
        QFile file(path); //Open the file and check for errors
        if(!file.open(QIODevice::ReadOnly | QIODevice::Text))
            throw std::runtime_error("Failed to open reading device");  
        
        QString wrappedData = qUncompress(file.readAll(), 9);
        file.close();
        
        QJsonDocument doc = QJsonDocument::fromJson(wrappedData);
        QJsonObject jsonObject = doc.object();
        
        QString DBField = jsonObject.value("DBField").toString();
        QString DBInitVector = jsonObject.value("DBInitVector").toString();
        QString DBSaltKey = jsonObject.value("DBSaltKey").toString();
        QString DBIterations = jsonObject.value("DBIterations").toString();
        QString DBStretchTime = jsonObject.value("DBStretchTime").toString();
        QString AData = DBSaltKey + DBInitVector;
        
        if(DBField.isEmpty() || DBInitVector.isEmpty() || DBSaltKey.isEmpty() || DBIterations.isEmpty() || DBStretchTime.isEmpty())
            throw std::runtime_error("Undefined database value on reading");
        
        QString derivedKey = AESModule::generateKey(compositeKey, DBSaltKey, DBIterations, DBStretchTime);
        QString decryptedData = AESModule::decryptData(DBField, AData, derivedKey, DBInitVector);
        
        return QJsonDocument::fromBinaryData(decryptedData);
    }
    catch(const std::exception &exception)
    {
        emit errorSignal(exception.what());
        return QJsonDocument();
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                       PUBLIC SLOTS                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
